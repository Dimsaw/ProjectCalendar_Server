openapi: 3.0.3
info:
  title: Calendar OpenAPI
  description: |-
    Team project "Calendar" by Swagger OpenAPI 3.0
  version: 1.0.0
servers:
  - url: https://calendar-server-up6y.onrender.com/api
    description: web server
  - url: http://localhost:5000/api
    description: local server
tags:
  - name: user
    description: register, login, logout and others operations with User
  - name: review
    description: Add new review and get all reviews


paths:
  /users/register:
    post:
      tags:
        - user
      summary: Register user
      description: Register user with verify and send him email for verify
      operationId: registerUser
      requestBody:
        description: Registration
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@mail.uk.com
                username:
                  type: string
                  example: Selena
                password:
                  type: string
                  format: password
                  example: Ro134908
              required:
                - email
                - username
                - password
      responses:
        '201':
          description: successful operation, user added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 6474d6660697bcc4c3e2b7c6
                      email:
                        type: string
                        example: example@mail.uk.com
                      name:
                        type: string
                        example: Selena
                  message:
                    type: string
                    example:
                      'User with email: example@mail.uk.com has been created'
        '409':
          description: 'Email has already registered'

  /users/login:
    post:
      tags:
        - user
      summary: Login user
      description: ''
      operationId: loginUser
      requestBody:
        description: Authorization
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@mail.uk.com
                password:
                  type: string
                  format: password
                  example: Ro134908
              required:
                - email
                - password
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                        example: 'Selena'
                      email:
                        type: string
                        example: example@mail.uk.com
                      token:
                        type: string
                  message:
                    type: string
                    example:
                      'User with email: example@mail.uk.com has been logged in'
        '401':
          description:
            'User is not found / Email is not verified / Password is incorrect'

  /users/logout:
    post:
      tags:
        - user
      summary: Logout user
      description: ''
      operationId: logoutUser
      responses:
        '204':
          description: successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User is unauthorized'
      security:
        - BearerAuth: []

  /users/current:
    get:
      tags:
        - user
      summary: Get user by token
      description: ''
      operationId: getUserByToken
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 6474d6660697bcc4c3e2b7c6
                      username:
                        type: string
                        example: Selena
                      email:
                        type: string
                        example: example@mail.uk.com
      security:
        - BearerAuth: []

  /users/google:
    get:
      tags:
        - user
      summary: Authenticate with Google
      responses:
        '200':
          description: Redirect to Google for authentication
    get:
      tags:
        - user
      summary: Google Auth Callback
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
        - in: query
          name: state
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to success or failure URL

  /users/google/callback:
    post:
      tags:
        - user
      summary: Successful Google Auth Callback
      responses:
        '200':
          description: Successful authentication through Google
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                        example: Selena
                      email:
                        type: string
                        example: example@mail.uk.com
                      token:
                        type: string
                  message:
                    type: string
                    example: 'User with email: example@mail.uk.com has been logged in through Google Auth'
                  redirectURL:
                    type: string
                    example: https://my-app.com/calendar_front?token=${token}

  # ===================================================================================================
  /reviews:
    get:
      tags:
        - review
      summary: Get all reviews
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
      security:
        - BearerAuth: []

    post:
      tags:
        - review
      summary: Add a new review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid request payload
      security:
        - BearerAuth: []

  # ===================================================================================================

  
  # ===================================================================================================
components:
  schemas:
    User:
      type: object
      properties:
        avatarURL:
          type: string
          pattern: <urlPattern>
          description: Avatar URL of the reviewer
        email:
          type: string
          example: example@mail.uk.com
        username:
          type: string
          example: Selena
        password:
          type: string
          example: Ro1478
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0NzRkNjY2MDY5N2JjYzRjM2UyYjdjNiIsImlhdCI6MTY4NTM3ODgzOSwiZXhwIjoxNjg2MjQyODM5fQ.sjZrOUHEzQjNAgaPQSmlBmkAvEyHzOg75_j7f-o-84E
        verify:
          type: boolean
          example: false
        verificationToken:
          type: string
          example: ldfhgkfdjh3gnrwrejut58
      required:
        - email
        - username
        - password
    Review:
      type: object
      properties:
        stars:
          type: integer
          enum: [1, 2, 3, 4, 5]
          description: Rating in stars (1 to 5)
        comment:
          type: string
          minLength: 6
          maxLength: 300
          description: Review comment
        owner:
          type: string
          description: ID of the reviewer (user)
      required:
        - stars
        - comment
        - owner
