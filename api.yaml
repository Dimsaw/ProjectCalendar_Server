openapi: 3.0.3
info:
  title: Goose Track Team Project
  description: |-
    Team project "Goose Track" by Swagger OpenAPI 3.0
  version: 1.0.0
servers:
  - url: https://calendar-server-up6y.onrender.com/api
    description: web server
  - url: http://localhost:5000/api
    description: local server
tags:
  - name: user
    description: register, login, logout and others operations with User
  - name: review
    description: Add new review and get all reviews

paths:
  /users/register:
    post:
      tags:
        - user
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@mail.uk.com
                username:
                  type: string
                  example: Selena
                password:
                  type: string
                  format: password
                  example: Ro134908
              required:
                - email
                - username
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: 'Email has already registered'

  /users/login:
    post:
      tags:
        - user
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@mail.uk.com
                password:
                  type: string
                  format: password
                  example: Ro134908
              required:
                - email
                - password
      responses:
        '200':
          description: User login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description:
            'User is not found / Email is not verified / Password is incorrect'

  /users/logout:
    post:
      tags:
        - user
      summary: Logout user
      responses:
        '204':
          description: successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User is unauthorized'
      security:
        - BearerAuth: []

  /users/current:
    get:
      tags:
        - user
      summary: Get user by token
      responses:
        '200':
          description: User login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - BearerAuth: []

  /users/google:
    get:
      tags:
        - user
      summary: Authenticate with Google
      responses:
        '200':
          description: Redirect to Google for authentication
    get:
      tags:
        - user
      summary: Google Auth Callback
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
        - in: query
          name: state
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to success or failure URL

  /users/google/callback:
    post:
      tags:
        - user
      summary: Successful Google Auth Callback
      responses:
          '200':
            description: User login successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        avatarURL:
                          type: string
                          description: URL of the user's avatar
                        username:
                          type: string
                          description: User's username
                        email:
                          type: string
                          description: User email address
                        birthday:
                          type: string
                          format: date
                          description: User's birthday
                        phone:
                          type: string
                          description: User's phone number
                        skype:
                          type: string
                          description: User's Skype ID
                        token:
                          type: string
                          description: User's token
                    message:
                      type: string
                      description: Success message
                      example: example@mail.uk.com has been logged in through Google Auth
                    redirectURL:
                      type: string
                      description: URL for redirecting the user
                      example: 'https://oleh-kliapko.github.io/GooseTrack_front/login?token=${token}'

  /users/verify:
    post:
      tags:
        - user
      summary: Send Verification Email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
              required:
                - email
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification email sent to example@mail.uk.com
        '400':
          description: Verification has already been passed
        '404':
          description: User not found
  
  # ===================================================================================================
  /reviews:
    get:
      tags:
        - review
      summary: Get all reviews
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
      security:
        - BearerAuth: []

    post:
      tags:
        - review
      summary: Add a new review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid request payload
      security:
        - BearerAuth: []

  # ===================================================================================================

  
  # ===================================================================================================
components:
  schemas:
    User:
      type: object
      properties:
        avatarURL:
          type: string
          pattern: <urlPattern>
          description: URL of the user's avatar
        email:
          type: string
          description: User email address
        username:
          type: string
          description: User's username - only Latin or Cyrillic characters
        password:
          type: string
          description: User password - no less than 6 characters, at least one upperCase and one lowercase
          example: Ro1478
        birthday:
          type: string
          format: date
          description: User's birthday
        phone:
          type: string
          example: 38 (067) 409 90 67
          description: User's phone number - pattern /^38 \(\d{3}\) \d{3} \d{2} \d{2}$/;
        skype:
          type: string
          description: User's Skype ID
        token:
          type: string
          description: User's token
        # verify:
        #   type: boolean
        #   description: Indicates if the user is verified
        # verificationToken:
        #   type: string
        #   description: User's verification token
      required:
        - email
        - username
        - password
    Review:
      type: object
      properties:
        stars:
          type: integer
          enum: [1, 2, 3, 4, 5]
          description: Rating in stars (1 to 5)
        comment:
          type: string
          minLength: 6
          maxLength: 300
          description: Review comment
        owner:
          type: string
          description: ID of the reviewer (user)
      required:
        - stars
        - comment
        - owner
