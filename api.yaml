openapi: 3.0.3
info:
  title: Goose Track Team Project
  description: |-
    Team project "Goose Track" by Swagger OpenAPI 3.0
  version: 1.0.0
servers:
  - url: https://calendar-server-g3h0.onrender.com/api
    description: web server
  - url: http://localhost:5000/api
    description: local server
tags:
  - name: user
    description: register, login, logout and others operations with User
  - name: review
    description: Add new review and get reviews

paths:
  /users/register:
    post:
      tags:
        - user
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@mail.uk.com
                username:
                  type: string
                  example: Selena
                password:
                  type: string
                  format: password
                  example: Ro134908
              required:
                - email
                - username
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: user ID from Mongo DB
                      email:
                        type: string
                      username:
                        type: string
        '409':
          description: 'Email has already registered'

  /users/login:
    post:
      tags:
        - user
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@mail.uk.com
                password:
                  type: string
                  example: Ro134908
              required:
                - email
                - password
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      avatarURL:
                        type: string
                        example: ""
                      email:
                        type: string
                      username:
                        type: string
                      birthday:
                        type: string
                        example: null
                      phone:
                        type: string
                        example: ""
                      skype:
                        type: string
                        example: ""
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0N2EyYWVkNzJlZmI3M2I5MzM0ZDNkMiIsImlhdCI6MTY4NTcyODA3NiwiZXhwIjoxNjg2NTkyMDc2fQ.wMinCoY8gM4Pgu7tCR0lQ557SEubm58K7XYtsNa9tc8
        '401':
          description:
            'User is not found / Email is not verified / Password is incorrect'

  /users/logout:
    post:
      tags:
        - user
      summary: Logout user
      responses:
        '204':
          description: successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User is unauthorized'
      security:
        - BearerAuth: []

  /users/current:
    get:
      tags:
        - user
      summary: Get user by token
      responses:
        '200':
          description: User was gotten successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "647a2aed72efb73b9334d3d2"
                      avatarURL:
                        type: string
                        example: "http://my-avatar.com/23456"
                      email:
                        type: string
                      username:
                        type: string
                      birthday:
                        type: string
                        example: 1977-06-10T00:00:00.000Z
                      phone:
                        type: string
                        example: "38 (067) 111 17 11"
                      skype:
                        type: string
                        example: "(067) 111 17 11"
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0N2EyYWVkNzJlZmI3M2I5MzM0ZDNkMiIsImlhdCI6MTY4NTcyODA3NiwiZXhwIjoxNjg2NTkyMDc2fQ.wMinCoY8gM4Pgu7tCR0lQ557SEubm58K7XYtsNa9tc8
      security:
        - BearerAuth: []

  /users/update/{id}:
    put:
      tags:
        - user
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User was gotten successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      avatarURL:
                        type: string
                        example: "http://my-avatar.com/23456"
                      email:
                        type: string
                      username:
                        type: string
                      birthday:
                        type: string
                        example: 1977-06-10T00:00:00.000Z
                      phone:
                        type: string
                        example: "38 (067) 111 17 11"
                      skype:
                        type: string
                        example: "(067) 111 17 11"
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0N2EyYWVkNzJlZmI3M2I5MzM0ZDNkMiIsImlhdCI6MTY4NTcyODA3NiwiZXhwIjoxNjg2NTkyMDc2fQ.wMinCoY8gM4Pgu7tCR0lQ557SEubm58K7XYtsNa9tc8
      security:
        - BearerAuth: []

  /users/google:
    get:
      tags:
        - user
      summary: Authenticate with Google
      responses:
        '200':
          description: Redirect to Google for authentication
    get:
      tags:
        - user
      summary: Google Auth Callback
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
        - in: query
          name: state
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to success or failure URL

  /users/google/callback:
    post:
      tags:
        - user
      summary: Successful Google Auth Callback
      responses:
          '200':
            description: User login successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        avatarURL:
                          type: string
                          description: URL of the user's avatar
                        username:
                          type: string
                          description: User's username
                        email:
                          type: string
                          description: User email address
                        birthday:
                          type: string
                          format: date
                          description: User's birthday
                        phone:
                          type: string
                          description: User's phone number
                        skype:
                          type: string
                          description: User's Skype ID
                        token:
                          type: string
                          description: User's token
                    message:
                      type: string
                      description: Success message
                      example: example@mail.uk.com has been logged in through Google Auth
                    redirectURL:
                      type: string
                      description: URL for redirecting the user
                      example: 'https://oleh-kliapko.github.io/GooseTrack_front/login?token=${token}'

  /users/verify:
    post:
      tags:
        - user
      summary: Send Verification Email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
              required:
                - email
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification email sent to example@mail.uk.com
        '400':
          description: Verification has already been passed
        '404':
          description: User not found
  
  # ===================================================================================================
  /reviews:
    get:
      tags:
        - review
      summary: Get all reviews
      parameters:
        - name: page
          in: query
          description: Page number for pagination (default: 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of reviews per page (default: 10)
          schema:
            type: integer
            minimum: 1
            default: 10
      responses:
        '200':
          description: Reviews fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReviewsResponse'

    post:
      tags:
        - review
      summary: Add a new review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stars:
                  type: number
                  enum: [1, 2, 3, 4, 5]
                comment:
                  type: string
                  minLength: 6
                  maxLength: 300
              required:
                - stars
                - comment
      responses:
        '201':
          description: Review added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stars:
                        type: number
                        description: Rating in stars (1 to 5)
                      comment:
                        type: string
                        description: Review comment
                      owner:
                        type: string
                        description: ID of the reviewer (user)
                      createdAt:
                        type: string
                        format: date-time
                        description: Time of comment creating 
        '400':
          description: Invalid request payload
      security:
        - BearerAuth: []

  /reviews/own:
    get:
      tags:
        - review
      summary: Get all reviews of current user
      parameters:
        - name: page
          in: query
          description: Page number for pagination (default: 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of reviews per page (default: 10)
          schema:
            type: integer
            minimum: 1
            default: 10
      responses:
        '200':
          description: Reviews fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllReviewsResponse'
      security:
        - BearerAuth: []

  /reviews/own/{id}:
    put:
      tags:
        - review
      summary: Update a review by ID
      parameters:
        - name: id
          in: path
          description: ID of the review to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stars:
                  type: number
                  enum: [1, 2, 3, 4, 5]
                comment:
                  type: string
                  minLength: 6
                  maxLength: 300
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stars:
                        type: number
                        description: Rating in stars (1 to 5)
                      comment:
                        type: string
                        description: Review comment
                      owner:
                        type: string
                        description: ID of the reviewer (user)
                      createdAt:
                        type: string
                        format: date-time
                        description: Time of comment creating 
      security:
        - BearerAuth: []

    delete:
      tags:
        - review
      summary: Delete a review by ID
      parameters:
        - name: id
          in: path
          description: ID of the review to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review was deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review by ID:647b12d0a4286b7e663ecfea was deleted"
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review not found"
      security:
        - BearerAuth: []
        
  # ===================================================================================================

  
  # ===================================================================================================
components:
  schemas:
    User:
      type: object
      properties:
        avatarURL:
          type: string
          pattern: <urlPattern>
          description: URL of the user's avatar
        email:
          type: string
          description: User email address with at least 2 domain segments
        username:
          type: string
          description: User's username - only Latin or Cyrillic characters
        password:
          type: string
          description: User password - no less than 6 characters, at least one upperCase and one lowercase
          example: Ro1478
        birthday:
          type: string
          format: date
          description: User's birthday
        phone:
          type: string
          example: 38 (067) 409 90 67
          description: User's phone number - pattern /^38 \(\d{3}\) \d{3} \d{2} \d{2}$/;
        skype:
          type: string
          description: User's Skype ID
        token:
          type: string
          description: User's token
        verify:
          type: boolean
          description: Indicates if the user is verified
        verificationToken:
          type: string
          description: User's verification token
      required:
        - email
        - username
        - password
    Review:
      type: object
      properties:
        stars:
          type: integer
          enum: [1, 2, 3, 4, 5]
          description: Rating in stars (1 to 5)
        comment:
          type: string
          minLength: 6
          maxLength: 300
          description: Review comment
        owner:
          type: string
          description: ID of the reviewer (user)
      required:
        - stars
        - comment
    UserUpdate:
      type: object
      properties:
        avatarURL:
          type: string
          pattern: <urlPattern>
          description: URL of the user's avatar
        email:
          type: string
          description: User email address with at least 2 domain segments
        username:
          type: string
          description: User's username - only Latin or Cyrillic characters
        password:
          type: string
          description: User password - no less than 6 characters, at least one upperCase and one lowercase
          example: Ro1478
        birthday:
          type: string
          format: date
          description: User's birthday
        phone:
          type: string
          example: 38 (067) 409 90 67
          description: User's phone number - pattern /^38 \(\d{3}\) \d{3} \d{2} \d{2}$/;
        skype:
          type: string
          description: User's Skype ID
      required:
        - avatarURL
        - email
        - username
        - birthday
        - phone
        - skype
    GetAllReviewsResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            reviews:
              type: array
              items:
                type: object
                properties:
                  stars:
                    type: integer
                    example: 4
                  comment:
                    type: string
                    example: GooseTrack is impressive, the calendar view and filter options make it easy to stay organized and focused. Highly recommended
                  owner:
                    type: string
                    example: 647a2aed72efb73b9334d3d2
                  createdAt:
                    type: string
                    example: 2023-06-03T06:21:30.884Z